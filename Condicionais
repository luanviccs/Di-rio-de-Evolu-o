/******************************************************/
/* */
/* üö¶    C O N D I C I O N A I S   E M   P Y T H O N    üö¶      */
/* */
/******************************************************/

> Condicionais s√£o estruturas de controle que permitem que seu programa tome decis√µes. 
> Elas executam diferentes blocos de c√≥digo com base em condi√ß√µes espec√≠ficas, 
> sendo a base da l√≥gica de programa√ß√£o.

### O Fluxo da Decis√£o

Imagine uma estrada com v√°rias bifurca√ß√µes. O Python segue este caminho:

      [ In√≠cio do C√≥digo ]
               |
               V
        <  √â verdade?  > ---[ SIM ]---> [ Bloco de c√≥digo do IF √© executado ]
               |
             [ N√ÉO ]
               |
               V
        < √â verdade? > ---[ SIM ]---> [ Bloco de c√≥digo do ELIF √© executado ]
               |
             [ N√ÉO ]
               |
               V
       [ Sem mais op√ß√µes? ] ---------> [ Bloco de c√≥digo do ELSE √© executado ]
               |
               V
         [ Fim do Bloco ]


### A Sintaxe no C√≥digo üêç

Em Python, esse fluxo √© implementado com as palavras-chave `if`, `elif` e `else`.

```python
# A estrutura b√°sica de uma condicional √© a seguinte:

if condicao_principal:
    # Bloco de c√≥digo a ser executado se a 
    # 'condicao_principal' for verdadeira.

elif outra_condicao:
    # Se a primeira falhou, este bloco ser√° executado 
    # se a 'outra_condicao' for verdadeira.

else:
    # Se NENHUMA das condi√ß√µes anteriores for verdadeira,
    # este bloco ser√° executado como rota final.


üí° Lembrete Final
O else funciona como uma "rede de seguran√ßa". Ele garante que, se nenhuma das suas condi√ß√µes espec√≠ficas for atendida, seu programa ainda ter√° um caminho padr√£o para seguir, cobrindo todos os outros casos poss√≠veis.
